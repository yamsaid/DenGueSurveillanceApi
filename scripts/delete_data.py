#!/usr/bin/env python3
"""
Script pour supprimer des donn√©es de la base de donn√©es Railway
Permet de supprimer des observations selon diff√©rents crit√®res
"""

import os
import pandas as pd
from sqlalchemy import create_engine, text
from datetime import datetime, date
import sys

def get_database_connection():
    """√âtablit la connexion √† la base de donn√©es Railway"""
    try:
        # R√©cup√©ration de l'URL depuis les variables d'environnement
        database_url = os.getenv('DATABASE_URL')
        
        if not database_url:
            print("‚ùå Erreur: DATABASE_URL non d√©finie")
            print("Assurez-vous que la variable d'environnement DATABASE_URL est configur√©e")
            return None
        
        # Correction de l'URL si n√©cessaire (postgres:// -> postgresql://)
        if database_url.startswith('postgres://'):
            database_url = database_url.replace('postgres://', 'postgresql://', 1)
        
        engine = create_engine(database_url)
        return engine
    
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return None

def show_current_data(engine):
    """Affiche les donn√©es actuelles dans la base"""
    try:
        with engine.connect() as conn:
            # Compter les cas de dengue
            result = conn.execute(text("SELECT COUNT(*) FROM tdengue2"))
            total_cas = result.scalar()
            
            # Compter les soumissions
            result = conn.execute(text("SELECT COUNT(*) FROM tsoumissions2"))
            total_soumissions = result.scalar()
            
            print(f"\nüìä Donn√©es actuelles dans la base :")
            print(f"   ‚Ä¢ Cas de dengue : {total_cas}")
            print(f"   ‚Ä¢ Soumissions : {total_soumissions}")
            
            # Aper√ßu des derni√®res donn√©es
            if total_cas > 0:
                result = conn.execute(text("""
                    SELECT idCas, date_consultation, region, district, sexe, age, resultat_test 
                    FROM tdengue2 
                    ORDER BY idCas DESC 
                    LIMIT 5
                """))
                print(f"\nüìã Derniers cas ajout√©s :")
                for row in result:
                    print(f"   ‚Ä¢ ID: {row[0]}, Date: {row[1]}, R√©gion: {row[2]}, District: {row[3]}")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'affichage des donn√©es: {e}")

def delete_by_date_range(engine, start_date, end_date):
    """Supprime les donn√©es dans une plage de dates"""
    try:
        with engine.connect() as conn:
            # Compter avant suppression
            result = conn.execute(text(f"""
                SELECT COUNT(*) FROM tdengue2 
                WHERE date_consultation BETWEEN '{start_date}' AND '{end_date}'
            """))
            count_before = result.scalar()
            
            if count_before == 0:
                print(f"‚ùå Aucune donn√©e trouv√©e entre {start_date} et {end_date}")
                return
            
            # Suppression
            result = conn.execute(text(f"""
                DELETE FROM tdengue2 
                WHERE date_consultation BETWEEN '{start_date}' AND '{end_date}'
            """))
            conn.commit()
            
            print(f"‚úÖ {count_before} cas supprim√©s entre {start_date} et {end_date}")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la suppression: {e}")

def delete_by_region(engine, region):
    """Supprime les donn√©es d'une r√©gion sp√©cifique"""
    try:
        with engine.connect() as conn:
            # Compter avant suppression
            result = conn.execute(text(f"""
                SELECT COUNT(*) FROM tdengue2 
                WHERE region = '{region}'
            """))
            count_before = result.scalar()
            
            if count_before == 0:
                print(f"‚ùå Aucune donn√©e trouv√©e pour la r√©gion {region}")
                return
            
            # Suppression
            result = conn.execute(text(f"""
                DELETE FROM tdengue2 
                WHERE region = '{region}'
            """))
            conn.commit()
            
            print(f"‚úÖ {count_before} cas supprim√©s pour la r√©gion {region}")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la suppression: {e}")

def delete_by_id_range(engine, start_id, end_id):
    """Supprime les donn√©es dans une plage d'ID"""
    try:
        with engine.connect() as conn:
            # Compter avant suppression
            result = conn.execute(text(f"""
                SELECT COUNT(*) FROM tdengue2 
                WHERE idCas BETWEEN {start_id} AND {end_id}
            """))
            count_before = result.scalar()
            
            if count_before == 0:
                print(f"‚ùå Aucune donn√©e trouv√©e entre les ID {start_id} et {end_id}")
                return
            
            # Suppression
            result = conn.execute(text(f"""
                DELETE FROM tdengue2 
                WHERE idCas BETWEEN {start_id} AND {end_id}
            """))
            conn.commit()
            
            print(f"‚úÖ {count_before} cas supprim√©s entre les ID {start_id} et {end_id}")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la suppression: {e}")

def delete_all_data(engine):
    """Supprime toutes les donn√©es (‚ö†Ô∏è ATTENTION)"""
    try:
        with engine.connect() as conn:
            # Compter avant suppression
            result = conn.execute(text("SELECT COUNT(*) FROM tdengue2"))
            count_before = result.scalar()
            
            if count_before == 0:
                print("‚ùå Aucune donn√©e √† supprimer")
                return
            
            # Demander confirmation
            confirm = input(f"‚ö†Ô∏è  ATTENTION: Vous allez supprimer {count_before} cas. Continuer ? (oui/non): ")
            if confirm.lower() != 'oui':
                print("‚ùå Suppression annul√©e")
                return
            
            # Suppression
            result = conn.execute(text("DELETE FROM tdengue2"))
            conn.commit()
            
            print(f"‚úÖ {count_before} cas supprim√©s")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la suppression: {e}")

def main():
    """Fonction principale"""
    print("üóëÔ∏è  Script de suppression de donn√©es - Base Railway")
    
    # Connexion √† la base
    engine = get_database_connection()
    if not engine:
        return
    
    # Affichage des donn√©es actuelles
    show_current_data(engine)
    
    print(f"\nüîß Options de suppression :")
    print(f"   1. Supprimer par plage de dates")
    print(f"   2. Supprimer par r√©gion")
    print(f"   3. Supprimer par plage d'ID")
    print(f"   4. Supprimer toutes les donn√©es (‚ö†Ô∏è ATTENTION)")
    print(f"   5. Quitter")
    
    choice = input("\nChoisissez une option (1-5): ")
    
    if choice == "1":
        start_date = input("Date de d√©but (YYYY-MM-DD): ")
        end_date = input("Date de fin (YYYY-MM-DD): ")
        delete_by_date_range(engine, start_date, end_date)
        
    elif choice == "2":
        region = input("R√©gion √† supprimer (ex: Centre, Hauts Bassins): ")
        delete_by_region(engine, region)
        
    elif choice == "3":
        start_id = input("ID de d√©but: ")
        end_id = input("ID de fin: ")
        delete_by_id_range(engine, int(start_id), int(end_id))
        
    elif choice == "4":
        delete_all_data(engine)
        
    elif choice == "5":
        print("üëã Au revoir !")
        
    else:
        print("‚ùå Option invalide")

if __name__ == "__main__":
    main() 