#!/usr/bin/env python3
"""
Script pour mettre √† jour les r√¥les des utilisateurs existants
Usage: python scripts/update_roles.py
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from schemas.database import SessionLocal, engine
from schemas import models
from datetime import datetime

def update_user_roles():
    """Met √† jour les r√¥les des utilisateurs existants"""
    db = SessionLocal()
    
    try:
        # Cr√©er les tables si elles n'existent pas
        models.Base.metadata.create_all(bind=engine)
        
        print("üîß Mise √† jour des r√¥les utilisateurs...")
        print("=" * 50)
        
        # Mettre √† jour les utilisateurs existants
        users_to_update = [
            {
                "email": "admin@dengue-surveillance.com",
                "role": "admin",
                "description": "Administrateur principal"
            },
            {
                "email": "jean.dupont@example.com",
                "role": "analyst",
                "description": "Analyste de donn√©es"
            },
            {
                "email": "marie.martin@example.com",
                "role": "authority",
                "description": "Autorit√© sanitaire"
            },
            {
                "email": "pierre.durand@example.com",
                "role": "user",
                "description": "Utilisateur standard"
            }
        ]
        
        updated_count = 0
        for user_data in users_to_update:
            user = db.query(models.User).filter(models.User.email == user_data["email"]).first()
            
            if user:
                old_role = user.role
                user.role = user_data["role"]
                user.updated_at = datetime.utcnow()
                
                print(f"‚úÖ {user_data['description']}: {old_role} ‚Üí {user_data['role']}")
                updated_count += 1
            else:
                print(f"‚ö†Ô∏è  Utilisateur {user_data['email']} non trouv√©")
        
        # Commiter les changements
        db.commit()
        
        print(f"\n‚úÖ {updated_count} utilisateurs mis √† jour avec succ√®s!")
        
        # Afficher le r√©sum√© des r√¥les
        print("\n" + "=" * 50)
        print("R√âSUM√â DES R√îLES")
        print("=" * 50)
        
        all_users = db.query(models.User).all()
        for user in all_users:
            print(f"üë§ {user.first_name} {user.last_name} ({user.email})")
            print(f"   R√¥le: {user.role}")
            print(f"   Statut: {'Actif' if user.is_active else 'Inactif'}")
            print()
        
        print("=" * 50)
        print("HI√âRARCHIE DES R√îLES")
        print("=" * 50)
        print("üî¥ Admin: Contr√¥le total de l'API")
        print("üü° Analyst: Tous les droits sauf ajouter des utilisateurs")
        print("üü¢ Authority: Pas d'ajout d'utilisateurs, pas d'acc√®s mise √† jour")
        print("üîµ User: Pas d'acc√®s mise √† jour, pas d'ajout d'utilisateurs")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la mise √† jour des r√¥les: {e}")
        db.rollback()
    finally:
        db.close()

def create_test_users_with_roles():
    """Cr√©e des utilisateurs de test avec les nouveaux r√¥les"""
    db = SessionLocal()
    
    try:
        # Utilisateurs de test avec nouveaux r√¥les
        test_users = [
            {
                "first_name": "Alice",
                "last_name": "Analyste",
                "email": "alice.analyste@test.com",
                "username": "alice.analyste",
                "password": "Analyst123!",
                "role": "analyst"
            },
            {
                "first_name": "Bob",
                "last_name": "Authority",
                "email": "bob.authority@test.com",
                "username": "bob.authority",
                "password": "Authority123!",
                "role": "authority"
            },
            {
                "first_name": "Charlie",
                "last_name": "User",
                "email": "charlie.user@test.com",
                "username": "charlie.user",
                "password": "User123!",
                "role": "user"
            }
        ]
        
        created_count = 0
        for user_data in test_users:
            # V√©rifier si l'utilisateur existe d√©j√†
            existing_user = db.query(models.User).filter(
                (models.User.email == user_data["email"]) | 
                (models.User.username == user_data["username"])
            ).first()
            
            if existing_user:
                print(f"‚ö†Ô∏è  Utilisateur {user_data['username']} existe d√©j√†")
                continue
            
            # Cr√©er le nouvel utilisateur
            from passlib.context import CryptContext
            pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
            
            hashed_password = pwd_context.hash(user_data["password"])
            db_user = models.User(
                first_name=user_data["first_name"],
                last_name=user_data["last_name"],
                email=user_data["email"],
                username=user_data["username"],
                hashed_password=hashed_password,
                role=user_data["role"],
                is_active=True,
                created_at=datetime.utcnow()
            )
            
            db.add(db_user)
            created_count += 1
            print(f"‚úÖ Utilisateur {user_data['username']} cr√©√© avec le r√¥le {user_data['role']}")
        
        db.commit()
        print(f"\n‚úÖ {created_count} nouveaux utilisateurs cr√©√©s!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des utilisateurs: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    print("üîß Mise √† jour du syst√®me de r√¥les...")
    print("=" * 50)
    
    # Mettre √† jour les r√¥les existants
    update_user_roles()
    
    # Demander si on veut cr√©er des utilisateurs de test
    response = input("\nVoulez-vous cr√©er des utilisateurs de test avec les nouveaux r√¥les? (y/n): ")
    if response.lower() in ['y', 'yes', 'o', 'oui']:
        create_test_users_with_roles()
    
    print("\n‚úÖ Configuration des r√¥les termin√©e!")
    print("Vous pouvez maintenant tester les diff√©rents niveaux d'acc√®s.") 