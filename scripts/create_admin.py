#!/usr/bin/env python3
"""
Script pour cr√©er un utilisateur administrateur par d√©faut
Usage: python scripts/create_admin.py
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from schemas.database import SessionLocal, engine
from schemas import models
from passlib.context import CryptContext
from datetime import datetime

# Configuration du hachage des mots de passe
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def get_password_hash(password):
    """G√©n√®re un hash du mot de passe"""
    return pwd_context.hash(password)

def create_admin_user():
    """Cr√©e un utilisateur administrateur par d√©faut"""
    db = SessionLocal()
    
    try:
        # V√©rifier si l'utilisateur admin existe d√©j√†
        existing_admin = db.query(models.User).filter(
            models.User.username == "admin"
        ).first()
        
        if existing_admin:
            print("L'utilisateur administrateur existe d√©j√†.")
            return
        
        # Cr√©er l'utilisateur administrateur
        admin_user = models.User(
            username="admin",
            email="admin@dengue-surveillance.com",
            hashed_password=get_password_hash("admin123"),
            first_name="Administrateur",
            last_name="Syst√®me",
            role="admin",
            is_active=True,
            created_at=datetime.utcnow()
        )
        
        db.add(admin_user)
        db.commit()
        db.refresh(admin_user)
        
        print("‚úÖ Utilisateur administrateur cr√©√© avec succ√®s!")
        print(f"   Username: admin")
        print(f"   Email: admin@dengue-surveillance.com")
        print(f"   Mot de passe: admin123")
        print("\n‚ö†Ô∏è  IMPORTANT: Changez le mot de passe apr√®s la premi√®re connexion!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de l'utilisateur administrateur: {e}")
        db.rollback()
    finally:
        db.close()

def create_test_users():
    """Cr√©e quelques utilisateurs de test"""
    db = SessionLocal()
    
    try:
        # Utilisateur analyste
        analyst_user = models.User(
            username="analyste",
            email="analyste@dengue-surveillance.com",
            hashed_password=get_password_hash("analyste123"),
            first_name="Jean",
            last_name="Dupont",
            role="analyst",
            is_active=True,
            created_at=datetime.utcnow()
        )
        
        # Utilisateur standard
        user_standard = models.User(
            username="utilisateur",
            email="user@dengue-surveillance.com",
            hashed_password=get_password_hash("user123"),
            first_name="Marie",
            last_name="Martin",
            role="user",
            is_active=True,
            created_at=datetime.utcnow()
        )
        
        db.add_all([analyst_user, user_standard])
        db.commit()
        
        print("‚úÖ Utilisateurs de test cr√©√©s avec succ√®s!")
        print("   Analyste: analyste / analyste123")
        print("   Utilisateur: utilisateur / user123")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des utilisateurs de test: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    print("üîß Cr√©ation des utilisateurs par d√©faut...")
    print("=" * 50)
    
    # Cr√©er les tables si elles n'existent pas
    models.Base.metadata.create_all(bind=engine)
    
    # Cr√©er l'administrateur
    create_admin_user()
    
    # Demander si on veut cr√©er des utilisateurs de test
    response = input("\nVoulez-vous cr√©er des utilisateurs de test? (y/n): ")
    if response.lower() in ['y', 'yes', 'o', 'oui']:
        create_test_users()
    
    print("\n‚úÖ Configuration termin√©e!")
    print("Vous pouvez maintenant d√©marrer l'application avec: uvicorn main:app --reload") 